// Generated by CoffeeScript 1.7.1
(function() {
  var KnowledgeNetGraph,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    if (jQuery('body.sample').length) {
      return jQuery.getJSON('data/js/js.json', function(data) {
        return new KnowledgeNetGraph(jQuery('.graph-paper'), data);
      });
    }
  });

  KnowledgeNetGraph = (function() {
    function KnowledgeNetGraph($elm, data) {
      this.$elm = $elm;
      this.data = data;
      this.__zoom = __bind(this.__zoom, this);
      this.SCALE = [0.25, 2];
      this.IMAGINARY_ROOT_NAME = 'IROOT';
      this.BASE_OFFSET_X = 300;
      this.offset_x = 0;
      this.offset_y = 0;
      this.knet = new KnowledgeNet(this.data);
      this.draw();
    }

    KnowledgeNetGraph.prototype.draw = function() {
      this._svg();
      return this._tree();
    };

    KnowledgeNetGraph.prototype._svg = function() {
      var zoom_behavior;
      zoom_behavior = d3.behavior.zoom().scaleExtent(this.SCALE).on('zoom', this.__zoom);
      this.svg = d3.select(this.$elm[0]).append('svg').attr('class', 'knsvg').call(zoom_behavior);
      return this.graph = this.svg.append('g');
    };

    KnowledgeNetGraph.prototype.__zoom = function() {
      var scale, translate;
      scale = d3.event.scale;
      this.__set_text_class(scale);
      translate = d3.event.translate;
      return this.graph.attr('transform', "translate(" + (translate[0] + this.offset_x * scale) + ", " + translate[1] + ") scale(" + scale + ")");
    };

    KnowledgeNetGraph.prototype.__set_text_class = function(scale) {
      var klass;
      klass = ['name'];
      if (scale < 0.8) {
        klass.push('hide');
      }
      return this.name_text.attr('class', (function(_this) {
        return function(d) {
          if (d.name === _this.IMAGINARY_ROOT_NAME) {
            return "iroot " + klass.join(' ');
          } else {
            return klass.join(' ');
          }
        };
      })(this));
    };

    KnowledgeNetGraph.prototype._tree = function() {
      var diagonal, first_node, links, node_enter, nodes, obj, tree, tree_data;
      tree_data = this.knet.get_tree_nesting_data();
      obj = {
        name: this.IMAGINARY_ROOT_NAME,
        children: tree_data
      };
      tree = d3.layout.tree().nodeSize([80, 120]).separation(function(a, b) {
        if (a.parent === b.parent) {
          return 1;
        } else {
          return 2;
        }
      });
      diagonal = d3.svg.diagonal().projection(function(d) {
        return [d.x, d.y];
      });
      nodes = tree.nodes(obj);
      links = tree.links(nodes);
      first_node = tree_data[0];
      this.offset_x = -first_node.x + this.BASE_OFFSET_X;
      this.graph.attr('transform', "translate(" + this.offset_x + ", 0)");
      node_enter = this.graph.selectAll('.node').data(nodes).enter().append('g').attr('class', 'node').attr('transform', function(d) {
        return "translate(" + d.x + ", " + d.y + ")";
      });
      this.circle = node_enter.append('circle').attr('r', 15).attr('class', (function(_this) {
        return function(d) {
          var klass;
          klass = [];
          if (d.depth === 1) {
            klass.push('start-point');
          }
          if (d.name === _this.IMAGINARY_ROOT_NAME) {
            klass.push('iroot');
          }
          return klass.join(' ');
        };
      })(this));
      this.name_text = node_enter.append('text').attr('dy', 45).attr('text-anchor', 'middle').text(function(d) {
        return d.name;
      });
      this.__set_text_class(1);
      return this.graph.selectAll('.link').data(links).enter().insert('path', 'g').attr('d', diagonal).attr('class', (function(_this) {
        return function(d) {
          if (d.source.name === _this.IMAGINARY_ROOT_NAME) {
            return 'iroot link';
          } else {
            return 'link';
          }
        };
      })(this));
    };

    return KnowledgeNetGraph;

  })();

}).call(this);

//# sourceMappingURL=ui.map
