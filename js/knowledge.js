// Generated by CoffeeScript 1.7.1
(function() {
  var DistanceSet, Graph, KnowledgeNet, edge_equal,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  edge_equal = function(e1, e2) {
    return e1[0] === e2[0] && e1[1] === e2[1];
  };

  KnowledgeNet = (function() {
    function KnowledgeNet(json_obj) {
      var child, child_id, e, p, parent, parent_id, _i, _j, _len, _len1, _ref, _ref1;
      this._points_map = {};
      this._edges = [];
      this.cleaned = false;
      _ref = json_obj['points'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        this._points_map[p.id] = {
          id: p.id,
          name: p.name,
          edges: [],
          parents: [],
          children: []
        };
      }
      _ref1 = json_obj['edges'];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        e = _ref1[_j];
        parent_id = e['parent'];
        child_id = e['child'];
        this._edges.push([parent_id, child_id]);
        parent = this.find_by(parent_id);
        child = this.find_by(child_id);
        parent.edges.push([parent_id, child_id]);
        parent.children.push(child_id);
        child.edges.push([parent_id, child_id]);
        child.parents.push(parent_id);
      }
    }

    KnowledgeNet.prototype.find_by = function(id) {
      return this._points_map[id];
    };

    KnowledgeNet.prototype.points = function() {
      var id;
      if (!this._points) {
        this._points = [];
        for (id in this._points_map) {
          this._points.push(id);
        }
      }
      return this._points;
    };

    KnowledgeNet.prototype.edges = function() {
      return this._edges;
    };

    KnowledgeNet.prototype.roots = function() {
      var id;
      if (!this._roots) {
        this._roots = [];
        for (id in this._points_map) {
          if (this.is_root(id)) {
            this._roots.push(id);
          }
        }
      }
      return this._roots;
    };

    KnowledgeNet.prototype.is_root = function(id) {
      var p;
      p = this.find_by(id);
      if (p.parents.length === 0) {
        return true;
      }
      return false;
    };

    KnowledgeNet.prototype.get_redundant_edges = function() {
      var child, child_id, point, _arr, _i, _len, _ref, _set;
      _set = new DistanceSet(this);
      _arr = this.roots().map(function(root_id) {
        return root_id;
      });
      while (_arr.length > 0) {
        point = this.find_by(_arr.shift());
        _set.add(point);
        _ref = point.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child_id = _ref[_i];
          child = this.find_by(child_id);
          if (_set.is_parents_here(child)) {
            _arr.push(child_id);
          }
        }
      }
      this.deeps = _set.deeps;
      return _set.redundant_edges;
    };

    KnowledgeNet.prototype.clean_redundant_edges = function() {
      var edge, _i, _len, _ref;
      if (this.cleaned) {
        return;
      }
      _ref = this.get_redundant_edges();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        edge = _ref[_i];
        this.clean_edge(edge);
      }
      return this.cleaned = true;
    };

    KnowledgeNet.prototype.clean_edge = function(edge) {
      var child, child_id, parent, parent_id;
      parent_id = edge[0];
      child_id = edge[1];
      parent = this.find_by(parent_id);
      child = this.find_by(child_id);
      parent.children = parent.children.filter(function(id) {
        return id !== child_id;
      });
      parent.edges = parent.edges.filter(function(e) {
        return !edge_equal(e, edge);
      });
      child.parents = child.parents.filter(function(id) {
        return id !== parent_id;
      });
      child.edges = child.edges.filter(function(e) {
        return !edge_equal(e, edge);
      });
      return this._edges = this._edges.filter(function(e) {
        return !edge_equal(e, edge);
      });
    };

    KnowledgeNet.prototype.get_deeps = function() {
      this.clean_redundant_edges();
      return this.deeps;
    };

    KnowledgeNet.prototype.get_tree_data = function() {
      var arr, edges, id, pid, point, stack, _i, _j, _len, _len1;
      this.clean_redundant_edges();
      arr = this.__deeps_arr();
      stack = [];
      edges = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        id = arr[_i];
        point = this.find_by(id);
        for (_j = 0, _len1 = stack.length; _j < _len1; _j++) {
          pid = stack[_j];
          if (__indexOf.call(point.parents, pid) >= 0) {
            edges.push([pid, id]);
            break;
          }
        }
        stack.unshift(id);
      }
      return {
        'points': arr,
        'edges': edges
      };
    };

    KnowledgeNet.prototype.get_tree_nesting_data = function() {
      var arr, id, map, pid, point, stack, _i, _j, _k, _len, _len1, _len2;
      this.clean_redundant_edges();
      arr = this.__deeps_arr();
      map = {};
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        id = arr[_i];
        point = this.find_by(id);
        map[id] = {
          id: point.id,
          name: point.name,
          children: []
        };
      }
      stack = [];
      for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
        id = arr[_j];
        point = this.find_by(id);
        for (_k = 0, _len2 = stack.length; _k < _len2; _k++) {
          pid = stack[_k];
          if (__indexOf.call(point.parents, pid) >= 0) {
            map[pid].children.push(map[id]);
            break;
          }
        }
        stack.unshift(id);
      }
      return this.roots().map(function(id) {
        return map[id];
      });
    };

    KnowledgeNet.prototype.__deeps_arr = function() {
      var arr, id;
      arr = [];
      for (id in this.deeps) {
        arr.push([this.deeps[id], id]);
      }
      return arr.sort().map(function(item) {
        return item[1];
      });
    };

    return KnowledgeNet;

  })();

  DistanceSet = (function() {
    function DistanceSet(net) {
      this.net = net;
      this.set = {};
      this.redundant_edges = [];
      this.deeps = {};
    }

    DistanceSet.prototype.is_parents_here = function(point) {
      var parent_id, _i, _len, _ref;
      _ref = point.parents;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parent_id = _ref[_i];
        if (!(parent_id in this.set)) {
          return false;
        }
      }
      return true;
    };

    DistanceSet.prototype.add = function(point) {
      var deep;
      this.set[point.id] = {};
      deep = this._r(point, point, 1);
      return this.deeps[point.id] = deep;
    };

    DistanceSet.prototype._r = function(current_point, point, distance) {
      var d, deep, parent_id, _i, _len, _ref;
      deep = 1;
      _ref = current_point.parents;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parent_id = _ref[_i];
        this._merge(parent_id, point.id, distance);
        d = this._r(this.net.find_by(parent_id), point, distance + 1);
        deep = Math.max(deep, this.deeps[parent_id] + 1);
      }
      return deep;
    };

    DistanceSet.prototype._merge = function(target_id, point_id, distance) {
      var d0;
      d0 = this.set[target_id][point_id];
      if (!d0) {
        this.set[target_id][point_id] = distance;
        return;
      }
      this.set[target_id][point_id] = Math.max(d0, distance);
      if (d0 !== distance && Math.min(d0, distance) === 1) {
        return this.redundant_edges.push([target_id, point_id]);
      }
    };

    return DistanceSet;

  })();

  KnowledgeNet.DistanceSet = DistanceSet;

  window.KnowledgeNet = KnowledgeNet;

  jQuery(function() {
    if (jQuery('body').hasClass('sample')) {
      return jQuery.ajax({
        url: 'data/js/js.json',
        type: 'GET',
        dataType: 'json',
        success: function(obj) {
          var graph;
          graph = new Graph;
          return graph.draw(obj);
        }
      });
    }
  });

  Graph = (function() {
    function Graph() {}

    Graph.prototype.draw = function(obj) {
      this.knet = new KnowledgeNet(obj);
      this._draw_svg();
      return this._draw_tree();
    };

    Graph.prototype._draw_svg = function() {
      this.screen_w = 16000;
      this.screen_h = 8000;
      return this.svg = d3.select('body').append('svg').attr('width', this.screen_w).attr('height', this.screen_h).append('g').attr('transform', 'translate(840 , 0)');
    };

    Graph.prototype._draw_tree = function() {
      var diagonal, links, node_enter, nodes, obj, tree, tree_data;
      tree_data = this.knet.get_tree_nesting_data();
      obj = {
        name: 'ROOT',
        children: tree_data
      };
      tree = d3.layout.tree().nodeSize([100, 120]).separation(function(a, b) {
        if (a.parent === b.parent) {
          return 1;
        } else {
          return 2;
        }
      });
      diagonal = d3.svg.diagonal().projection(function(d) {
        return [d.x, d.y];
      });
      nodes = tree.nodes(obj);
      links = tree.links(nodes);
      console.log(links);
      node_enter = this.svg.selectAll('.node').data(nodes).enter().append('g').attr('class', 'node').attr('transform', function(d) {
        return "translate(" + d.x + ", " + d.y + ")";
      });
      node_enter.append('circle').attr('r', 20).style('fill', '#fff').style('stroke', '#2A70E8').style('stroke-width', '3px').style('display', function(d) {
        if (d.name === 'ROOT') {
          return 'none';
        }
      });
      node_enter.append('text').attr('y', 40).attr('text-anchor', 'middle').text(function(d) {
        return d.name;
      }).style('font-family', 'arial, 微软雅黑').style('font-size', '14px').style('font-weight', 'bold').style('fill', '#444').style('display', function(d) {
        if (d.name === 'ROOT') {
          return 'none';
        }
      });
      return this.svg.selectAll('.link').data(links).enter().insert('path', 'g').attr('class', 'link').attr('d', diagonal).style('fill', 'none').style('stroke', '#ccc').style('stroke-width', '2px').style('display', function(d) {
        if (d.source.name === 'ROOT') {
          return 'none';
        }
      });
    };

    return Graph;

  })();

}).call(this);
