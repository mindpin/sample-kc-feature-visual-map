// Generated by CoffeeScript 1.7.1
(function() {
  var DistanceSet, KnowledgeNet, edge_equal;

  edge_equal = function(e1, e2) {
    return e1[0] === e2[0] && e1[1] === e2[1];
  };

  KnowledgeNet = (function() {
    function KnowledgeNet(json_obj) {
      var child, child_id, e, p, parent, parent_id, _i, _j, _len, _len1, _ref, _ref1;
      this._points_map = {};
      this._edges = [];
      _ref = json_obj['points'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        this._points_map[p.id] = {
          id: p.id,
          name: p.name,
          edges: [],
          parents: [],
          children: []
        };
      }
      _ref1 = json_obj['edges'];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        e = _ref1[_j];
        parent_id = e['parent'];
        child_id = e['child'];
        this._edges.push([parent_id, child_id]);
        parent = this.find_by(parent_id);
        child = this.find_by(child_id);
        parent.edges.push([parent_id, child_id]);
        parent.children.push(child_id);
        child.edges.push([parent_id, child_id]);
        child.parents.push(parent_id);
      }
    }

    KnowledgeNet.prototype.find_by = function(id) {
      return this._points_map[id];
    };

    KnowledgeNet.prototype.points = function() {
      var id;
      if (!this._points) {
        this._points = [];
        for (id in this._points_map) {
          this._points.push(this.find_by(id));
        }
      }
      return this._points;
    };

    KnowledgeNet.prototype.edges = function() {
      return this._edges;
    };

    KnowledgeNet.prototype.roots = function() {
      var id;
      if (!this._roots) {
        this._roots = [];
        for (id in this._points_map) {
          if (this.is_root(id)) {
            this._roots.push(id);
          }
        }
      }
      return this._roots;
    };

    KnowledgeNet.prototype.is_root = function(id) {
      var p;
      p = this.find_by(id);
      if (p.parents.length === 0) {
        return true;
      }
      return false;
    };

    KnowledgeNet.prototype.get_redundant_edges = function() {
      var child, child_id, point, _arr, _i, _len, _ref, _set;
      _set = new DistanceSet(this);
      _arr = this.roots().map(function(root_id) {
        return root_id;
      });
      while (_arr.length > 0) {
        point = this.find_by(_arr.shift());
        _set.add(point);
        _ref = point.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child_id = _ref[_i];
          child = this.find_by(child_id);
          if (_set.is_parents_here(child)) {
            _arr.push(child_id);
          }
        }
      }
      return _set.redundant_edges;
    };

    KnowledgeNet.prototype.clean_redundant_edges = function() {
      var edge, _i, _len, _ref, _results;
      _ref = this.get_redundant_edges();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        edge = _ref[_i];
        _results.push(this.clean_edge(edge));
      }
      return _results;
    };

    KnowledgeNet.prototype.clean_edge = function(edge) {
      var child, child_id, parent, parent_id;
      parent_id = edge[0];
      child_id = edge[1];
      parent = this.find_by(parent_id);
      child = this.find_by(child_id);
      parent.children = parent.children.filter(function(id) {
        return id !== child_id;
      });
      parent.edges = parent.edges.filter(function(e) {
        return !edge_equal(e, edge);
      });
      child.parents = child.parents.filter(function(id) {
        return id !== parent_id;
      });
      child.edges = child.edges.filter(function(e) {
        return !edge_equal(e, edge);
      });
      return this._edges = this._edges.filter(function(e) {
        return !edge_equal(e, edge);
      });
    };

    return KnowledgeNet;

  })();

  DistanceSet = (function() {
    function DistanceSet(net) {
      this.net = net;
      this.set = {};
      this.redundant_edges = [];
    }

    DistanceSet.prototype.is_parents_here = function(point) {
      var parent_id, _i, _len, _ref;
      _ref = point.parents;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parent_id = _ref[_i];
        if (!(parent_id in this.set)) {
          return false;
        }
      }
      return true;
    };

    DistanceSet.prototype.add = function(point) {
      this.set[point.id] = {};
      return this._r(point, point, 1);
    };

    DistanceSet.prototype._r = function(current_point, point, distance) {
      var parent_id, _i, _len, _ref, _results;
      _ref = current_point.parents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parent_id = _ref[_i];
        this._merge(parent_id, point.id, distance);
        _results.push(this._r(this.net.find_by(parent_id), point, distance + 1));
      }
      return _results;
    };

    DistanceSet.prototype._merge = function(target_id, point_id, distance) {
      var d0;
      d0 = this.set[target_id][point_id];
      if (!d0) {
        this.set[target_id][point_id] = distance;
        return;
      }
      this.set[target_id][point_id] = Math.max(d0, distance);
      if (d0 !== distance && Math.min(d0, distance) === 1) {
        return this.redundant_edges.push([target_id, point_id]);
      }
    };

    return DistanceSet;

  })();

  KnowledgeNet.DistanceSet = DistanceSet;

  window.KnowledgeNet = KnowledgeNet;

}).call(this);
