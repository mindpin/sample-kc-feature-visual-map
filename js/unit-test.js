// Generated by CoffeeScript 1.7.1
(function() {
  var DATA_JS_JSON_URL, FIXTRUE_GRAPH_JSON_URL, do_test, load_json;

  FIXTRUE_GRAPH_JSON_URL = 'fixture/graph.json';

  DATA_JS_JSON_URL = 'data/js/js.json';

  load_json = function(url, func) {
    return jQuery.ajax({
      url: url,
      type: 'GET',
      dataType: 'json',
      success: function(obj) {
        return func(obj);
      }
    });
  };

  jQuery(function() {
    load_json(FIXTRUE_GRAPH_JSON_URL, function(obj) {
      return do_test(obj['G1'], obj['G2'], obj['G3']);
    });
    return load_json(DATA_JS_JSON_URL, function(obj) {
      var js_net;
      js_net = new KnowledgeNet(obj);
      return test('查找多余边-JS', function() {
        var redundant_edges;
        redundant_edges = js_net.get_redundant_edges();
        return deepEqual(redundant_edges.sort(), [['n16', 'n89']]);
      });
    });
  });

  do_test = function(g1_obj, g2_obj, g3_obj) {
    test('JSON Object 检查', function() {
      ok(g1_obj['points'].length === 8);
      return ok(g1_obj['edges'].length === 11);
    });
    (function() {
      var knet, knet2;
      knet = new KnowledgeNet(g1_obj);
      knet2 = new KnowledgeNet(g2_obj);
      test('对象构建', function() {
        ok(knet.points().length === 8);
        return ok(knet.edges().length === 11);
      });
      (function() {
        var n, ne;
        n = knet.find_by('A');
        ne = knet.find_by('E');
        test('根据 ID 查找节点', function() {
          equal(n.id, 'A');
          return equal(n.name, 'A');
        });
        test('节点关联的边-G1-A', function() {
          var edges;
          edges = n.edges;
          equal(edges.length, 2);
          return deepEqual(edges.sort(), [['A', 'B'], ['A', 'C']]);
        });
        test('节点关联的边-G1-E', function() {
          var edges;
          edges = ne.edges;
          equal(edges.length, 4);
          return deepEqual(edges.sort(), [['B', 'E'], ['D', 'E'], ['E', 'G'], ['F', 'E']]);
        });
        test('子节点和父节点-G1-A', function() {
          equal(n.parents.length, 0);
          equal(n.children.length, 2);
          return deepEqual(n.children.sort(), ['B', 'C']);
        });
        return test('子节点和父节点-G1-E', function() {
          equal(ne.parents.length, 3);
          deepEqual(ne.parents.sort(), ['B', 'D', 'F']);
          equal(ne.children.length, 1);
          return deepEqual(ne.children, ['G']);
        });
      })();
      test('查找根节点-G1', function() {
        var roots;
        roots = knet.roots();
        equal(roots.length, 1);
        return ok(knet.is_root('A'));
      });
      return test('查找根节点-G2', function() {
        var roots;
        roots = knet2.roots();
        equal(roots.length, 3);
        ok(knet2.is_root('I'));
        ok(knet2.is_root('J'));
        ok(knet2.is_root('O'));
        return ok(!knet2.is_root('P'));
      });
    })();
    (function() {
      var knet1, knet2, knet3;
      knet1 = new KnowledgeNet(g1_obj);
      knet2 = new KnowledgeNet(g2_obj);
      knet3 = new KnowledgeNet(g3_obj);
      test('查找多余边-G1', function() {
        var redundant_edges;
        redundant_edges = knet1.get_redundant_edges();
        return deepEqual(redundant_edges.sort(), [['B', 'E'], ['D', 'H'], ['F', 'H']]);
      });
      test('查找多余边-G2', function() {
        var redundant_edges;
        redundant_edges = knet2.get_redundant_edges();
        return deepEqual(redundant_edges.sort(), []);
      });
      test('查找多余边-G3', function() {
        var redundant_edges;
        redundant_edges = knet3.get_redundant_edges();
        return deepEqual(redundant_edges.sort(), [['A', 'C'], ['A', 'D'], ['B', 'E'], ['C', 'F']]);
      });
      test('剔除多余边-G1', function() {
        var c;
        c = knet1.edges().length;
        knet1.clean_redundant_edges();
        equal(knet1.edges().length, c - 3);
        deepEqual(knet1.find_by('B').children, ['D']);
        return deepEqual(knet1.find_by('E').parents, ['D', 'F']);
      });
      test('剔除多余边-G2', function() {
        var c;
        c = knet2.edges().length;
        knet2.clean_redundant_edges();
        return equal(knet2.edges().length, c);
      });
      return test('剔除多余边-G3', function() {
        var c;
        deepEqual(knet3.find_by('C').edges, [['A', 'C'], ['B', 'C'], ['C', 'D'], ['C', 'F']]);
        c = knet3.edges().length;
        knet3.clean_redundant_edges();
        equal(knet3.edges().length, c - 4);
        deepEqual(knet3.find_by('A').children, ['B']);
        deepEqual(knet3.find_by('A').edges, [['A', 'B']]);
        deepEqual(knet3.find_by('B').children, ['C']);
        deepEqual(knet3.find_by('B').edges, [['A', 'B'], ['B', 'C']]);
        deepEqual(knet3.find_by('C').children, ['D']);
        deepEqual(knet3.find_by('C').edges, [['B', 'C'], ['C', 'D']]);
        deepEqual(knet3.find_by('D').children, ['E']);
        return deepEqual(knet3.find_by('E').children, ['F']);
      });
    })();
    (function() {
      var ds, knet;
      knet = new KnowledgeNet(g1_obj);
      ds = new KnowledgeNet.DistanceSet(knet);
      test('set#is_parents_here', function() {
        var p;
        ds.set = {};
        p = {
          id: 'A',
          parents: []
        };
        return ok(ds.is_parents_here(p));
      });
      test('set#is_parents_here', function() {
        var p;
        ds.set = {
          'A': {},
          'B': {}
        };
        p = {
          id: 'C',
          parents: ['A']
        };
        return ok(ds.is_parents_here(p));
      });
      return test('set#is_parents_here', function() {
        var p1, p2;
        ds.set = {
          'A': {},
          'B': {},
          'C': {}
        };
        p1 = {
          id: 'D',
          parents: ['A', 'B', 'C']
        };
        p2 = {
          id: 'E',
          parents: ['C', 'D']
        };
        ok(ds.is_parents_here(p1));
        return ok(!ds.is_parents_here(p2));
      });
    })();
    return (function() {
      var ds, knet;
      knet = new KnowledgeNet(g1_obj);
      ds = new KnowledgeNet.DistanceSet(knet);
      test('set#add A', function() {
        ds.add(knet.find_by('A'));
        return deepEqual(ds.set, {
          'A': {}
        });
      });
      test('set#add B', function() {
        ds.add(knet.find_by('B'));
        return deepEqual(ds.set, {
          'A': {
            'B': 1
          },
          'B': {}
        });
      });
      test('set#add C', function() {
        ds.add(knet.find_by('C'));
        return deepEqual(ds.set, {
          'A': {
            'B': 1,
            'C': 1
          },
          'B': {},
          'C': {}
        });
      });
      test('set#add D', function() {
        ds.add(knet.find_by('D'));
        return deepEqual(ds.set, {
          'A': {
            'B': 1,
            'C': 1,
            'D': 2
          },
          'B': {
            'D': 1
          },
          'C': {},
          'D': {}
        });
      });
      test('set#add F', function() {
        ds.add(knet.find_by('F'));
        return deepEqual(ds.set, {
          'A': {
            'B': 1,
            'C': 1,
            'D': 2,
            'F': 2
          },
          'B': {
            'D': 1
          },
          'C': {
            'F': 1
          },
          'D': {},
          'F': {}
        });
      });
      test('set#add E', function() {
        ds.add(knet.find_by('E'));
        deepEqual(ds.set, {
          'A': {
            'B': 1,
            'C': 1,
            'D': 2,
            'F': 2,
            'E': 3
          },
          'B': {
            'D': 1,
            'E': 2
          },
          'C': {
            'F': 1,
            'E': 2
          },
          'D': {
            'E': 1
          },
          'F': {
            'E': 1
          },
          'E': {}
        });
        return deepEqual(ds.redundant_edges, [['B', 'E']]);
      });
      test('set#add G', function() {
        ds.add(knet.find_by('G'));
        deepEqual(ds.set, {
          'A': {
            'B': 1,
            'C': 1,
            'D': 2,
            'F': 2,
            'E': 3,
            'G': 4
          },
          'B': {
            'D': 1,
            'E': 2,
            'G': 3
          },
          'C': {
            'F': 1,
            'E': 2,
            'G': 3
          },
          'D': {
            'E': 1,
            'G': 2
          },
          'F': {
            'E': 1,
            'G': 2
          },
          'E': {
            'G': 1
          },
          'G': {}
        });
        return deepEqual(ds.redundant_edges, [['B', 'E']]);
      });
      return test('set#add H', function() {
        ds.add(knet.find_by('H'));
        deepEqual(ds.set, {
          'A': {
            'B': 1,
            'C': 1,
            'D': 2,
            'F': 2,
            'E': 3,
            'G': 4,
            'H': 5
          },
          'B': {
            'D': 1,
            'E': 2,
            'G': 3,
            'H': 4
          },
          'C': {
            'F': 1,
            'E': 2,
            'G': 3,
            'H': 4
          },
          'D': {
            'E': 1,
            'G': 2,
            'H': 3
          },
          'F': {
            'E': 1,
            'G': 2,
            'H': 3
          },
          'E': {
            'G': 1,
            'H': 2
          },
          'G': {
            'H': 1
          },
          'H': {}
        });
        return deepEqual(ds.redundant_edges.sort(), [['B', 'E'], ['D', 'H'], ['F', 'H']]);
      });
    })();
  };

}).call(this);
