// Generated by CoffeeScript 1.7.1
(function() {
  var DATA_JS_JSON_URL, FIXTRUE_G1_JSON_URL, do_test;

  FIXTRUE_G1_JSON_URL = 'fixture/g1.json';

  DATA_JS_JSON_URL = 'data/js/js.json';

  jQuery(function() {
    return jQuery.ajax({
      url: FIXTRUE_G1_JSON_URL,
      type: 'GET',
      dataType: 'json',
      success: function(json_obj) {
        return do_test(json_obj);
      }
    });
  });

  do_test = function(json_obj) {
    test('JSON Object 检查', function() {
      console.log(json_obj);
      ok(json_obj['points'].length === 8);
      return ok(json_obj['edges'].length === 11);
    });
    return (function() {
      var knet;
      knet = new KnowledgeNet(json_obj);
      test('对象构建', function() {
        console.log(knet);
        console.log(knet.points());
        ok(knet.points().length === 8);
        return ok(knet.edges().length === 11);
      });
      (function() {
        var n, ne;
        n = knet.find_by('A');
        ne = knet.find_by('E');
        test('根据 ID 查找节点', function() {
          equal(n.id, 'A');
          return equal(n.name, 'A');
        });
        test('节点关联的边-A', function() {
          var edges;
          edges = n.edges;
          equal(edges.length, 2);
          ok(edges.indexOf(['A', 'B'] > -1));
          return ok(edges.indexOf(['A', 'C'] > -1));
        });
        test('节点关联的边-E', function() {
          var edges;
          edges = ne.edges;
          equal(edges.length, 4);
          ok(edges.indexOf(['B', 'E'] > -1));
          ok(edges.indexOf(['D', 'E'] > -1));
          ok(edges.indexOf(['F', 'E'] > -1));
          return ok(edges.indexOf(['E', 'G'] > -1));
        });
        test('子节点和父节点-A', function() {
          equal(n.parents.length, 0);
          equal(n.children.length, 2);
          ok(n.children.indexOf('B' > -1));
          ok(n.children.indexOf('C' > -1));
          return ok(n.children.indexOf('D' === -1));
        });
        return test('子节点和父节点-E', function() {
          equal(ne.parents.length, 3);
          ok(n.parents.indexOf('B' > -1));
          ok(n.parents.indexOf('D' > -1));
          ok(n.parents.indexOf('F' > -1));
          equal(ne.children.length, 1);
          return ok(n.children.indexOf('G' > -1));
        });
      })();
      return test('查找根节点', function() {
        var roots;
        roots = knet.roots();
        equal(roots.length, 1);
        return equal(roots[0].name, 'A');
      });
    })();
  };

}).call(this);
